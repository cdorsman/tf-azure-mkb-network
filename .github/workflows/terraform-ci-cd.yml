name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  TF_VERSION: '1.6.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  # Validate Terraform code
  validate:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact

  # Security scan
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-report.sarif

  # Plan for Development
  plan-dev:
    name: 'Plan - Development'
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref != 'refs/heads/main' || github.event.inputs.action == 'plan'
    environment: development
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk-Dev"
          location = "West Europe"
          vnet_name = "mkb-vnet-dev"
          admin_ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          enable_bastion = true
          EOF

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('tfplan', 'utf8');
            
            const output = `#### Terraform Plan ðŸ“– \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`hcl
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-dev
          path: tfplan
          retention-days: 5

  # Deploy to Development
  deploy-dev:
    name: 'Deploy - Development'
    runs-on: ubuntu-latest
    needs: plan-dev
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan-dev

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=dev/terraform.tfstate"

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk-Dev"
          location = "West Europe"
          vnet_name = "mkb-vnet-dev"
          admin_ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          enable_bastion = true
          EOF

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        run: terraform output -json > outputs.json

      - name: Upload Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs-dev
          path: outputs.json

  # Plan for Production
  plan-prod:
    name: 'Plan - Production'
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.action == 'plan')
    environment: production
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk"
          location = "West Europe"
          vnet_name = "mkb-vnet"
          admin_ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          enable_bastion = true
          EOF

      - name: Terraform Plan
        run: terraform plan -detailed-exitcode -out=tfplan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-prod
          path: tfplan
          retention-days: 30

  # Deploy to Production (Manual approval required)
  deploy-prod:
    name: 'Deploy - Production'
    runs-on: ubuntu-latest
    needs: plan-prod
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.action == 'apply')
    environment: 
      name: production
      url: ${{ steps.outputs.outputs.web_url }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan-prod

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk"
          location = "West Europe"
          vnet_name = "mkb-vnet"
          admin_ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          enable_bastion = true
          EOF

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        id: outputs
        run: |
          terraform output -json > outputs.json
          echo "web_url=$(terraform output -raw web_url)" >> $GITHUB_OUTPUT

      - name: Upload Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs-prod
          path: outputs.json

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "Web URL: ${{ steps.outputs.outputs.web_url }}"