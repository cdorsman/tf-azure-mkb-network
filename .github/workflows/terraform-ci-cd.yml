name: 'Terraform CI/CD Pipeline'

# Permissions needed for GitHub Actions
permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development
          - staging

env:
  TF_VERSION: '1.6.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_LOG: ERROR

jobs:
  # Validate Terraform code
  validate:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact

  # Security scan
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-report.sarif
          skip_check: CKV2_AZURE_31,CKV_AZURE_97

      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: checkov-report.sarif

  # Plan for Development
  plan-dev:
    name: 'Plan - Development'
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: |
      (github.ref != 'refs/heads/main' || github.event.inputs.action == 'plan') &&
      (github.event.inputs.environment == 'development' || github.event.inputs.environment == '')
    environment: development
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk-Dev"
          location = "West US 2"
          vnet_name = "mkb-vnet-dev"
          enable_bastion = true
          EOF

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-dev
          path: tfplan
          retention-days: 5

  # Deploy to Development
  deploy-dev:
    name: 'Deploy - Development'
    runs-on: ubuntu-latest
    needs: plan-dev
    if: github.event.inputs.environment == 'development' && github.event.inputs.action == 'apply'
    environment: development
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-dev

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk-Dev"
          location = "West US 2"
          vnet_name = "mkb-vnet-dev"
          enable_bastion = true
          EOF

      - name: Terraform Apply
        run: |
          echo "🚀 Starting Terraform Apply with enhanced visibility..."
          echo "📊 Using parallelism=2 for clearer module execution tracking"
          terraform apply -auto-approve -parallelism=2 tfplan

      - name: Terraform Output
        run: terraform output -json > outputs.json

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-dev
          path: outputs.json

  # Plan for Production
  plan-prod:
    name: 'Plan - Production'
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event.inputs.environment == 'production' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'))
    environment: production
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk"
          location = "West US 2"
          vnet_name = "mkb-vnet"
          enable_bastion = true
          alert_email = "cdorsman@thefactory.nl"
          EOF

      - name: Terraform Plan
        run: terraform plan -detailed-exitcode -out=tfplan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-prod
          path: tfplan
          retention-days: 30

  # Deploy to Production (Manual approval required)
  deploy-prod:
    name: 'Deploy - Production'
    runs-on: ubuntu-latest
    needs: plan-prod
    if: github.event.inputs.environment == 'production' && github.event.inputs.action == 'apply'
    environment: 
      name: production
      url: ${{ steps.outputs.outputs.web_url }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-prod

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk"
          location = "West US 2"
          vnet_name = "mkb-vnet"
          enable_bastion = true
          alert_email = "cdorsman@thefactory.nl"
          EOF

      - name: Terraform Apply
        run: |
          echo "🚀 Starting Terraform Apply with enhanced visibility..."
          echo "📊 Using parallelism=2 for clearer module execution tracking"
          terraform apply -auto-approve -parallelism=2 tfplan

      - name: Terraform Output
        id: outputs
        run: |
          terraform output -json > outputs.json
          echo "web_url=$(terraform output -raw web_url)" >> $GITHUB_OUTPUT

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-prod
          path: outputs.json

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "Web URL: ${{ steps.outputs.outputs.web_url }}"

  # Destroy Development Environment
  destroy-dev:
    name: 'Destroy - Development'
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.event.inputs.environment == 'development' && github.event.inputs.action == 'destroy'
    environment: development
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk-Dev"
          location = "West US 2"
          vnet_name = "mkb-vnet-dev"
          enable_bastion = true
          EOF

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      - name: Notify Destroy Success
        if: success()
        run: echo "🗑️ Development environment destroyed successfully!"

  # Destroy Production Environment
  destroy-prod:
    name: 'Destroy - Production'
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.event.inputs.environment == 'production' && github.event.inputs.action == 'destroy'
    environment: production
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          resource_group_name = "RG-MKB-Netwerk"
          location = "West US 2"
          vnet_name = "mkb-vnet"
          enable_bastion = true
          alert_email = "cdorsman@thefactory.nl"
          EOF

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      - name: Notify Destroy Success
        if: success()
        run: echo "🗑️ Production environment destroyed successfully!"
